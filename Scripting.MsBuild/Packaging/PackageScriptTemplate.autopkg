// Implicity loaded template script for Autopackage
// This file is automatically imported into Autopackage to set the defaults 

#defines { 
    ElementId = "";
    // condition = ${ElementId}; // this isn't needed here any longer.
    conditionFolder = ${ElementId};
}

configurations {
    Toolset { 
        key : "PlatformToolset"; 
        choices: { v110, v100, v90, v80, v71, v70, v60, gcc };  
    };
    
    Platform {
        key : "Platform"; 
        choices: { Win32, x64, ARM, AnyCPU };
        Win32.aliases : { x86, win32, ia32, 386 };
        x64.aliases : { x64, amd64, em64t, intel64, x86-64, x86_64 };
        ARM.aliases : { arm, woa };
        AnyCPU.aliases : { anycpu, any };
    };

    Configuration {
        key : "Configuration"; 
        choices: { Release, Debug };
    };

    Linkage { 
        choices : { dynamic, static, ltcg, sxs };
        description = "Which version of the .lib file to link to this library";

        ltcg.description = "Link Time Compiler Generation";
        dynamic.description = "Dynamic Library (DLL)";
        static.description = "Static";
        sxs.description = "Side-by-Side";
    };

    // Only really applicable to x86
    CallingConvention {
        choices : { cdecl, stdcall, fastcall, thiscall, clrcall };
        description = "Calling convention model to use (for x86 only)";
        cdecl.description = "cdecl";
        stdcall.description = "stdcall (Uncommon)";
        fastcall.description = "fastcall (Rare)";
        thiscall.description = "thiscall (Rare)";
        clrcall.description = "clrcall (Rare)";

        stdcall.restricted-to = "Win32";
        fastcall.restricted-to = "Win32";
        thiscall.restricted-to = "Win32";
        clrcall.restricted-to = "Win32";
    };

	/* 
		Since the MSBuild  property for identifying if a project is compiling a Win8 Store App
		is a boolean, and we don't want to actually key off that, we're going to generate 
		a property that gets a value based on that boolean, and key off of that.
		
		We'll declare that property in the props file (so that it happens early in the MSBuild)
		(see the props section down near the bottom)
	*/

	TargetApplicationType {
		key: "TargetApplicationType";
		choices: { Desktop,  WinRT, Phone8 };
		Desktop.aliases : { Desktop, NotWinRT };
		WinRT.aliases : { WinRT, Metro, Modern };
		Phone8.aliases : { Phone8, Phone, WindowsPhone };
		Phone8.condition = "('$(TargetPlatformIdentifier)' == 'Windows Phone' And '$(TargetPlatformVersion)' == '8.0')";
		WinRT.condition = "('$(AppContainerApplication)' == 'true')";
		Desktop.condition =  "( !('$(AppContainerApplication)' == 'true') And !('$(TargetPlatformIdentifier)' == 'Windows Phone' And '$(TargetPlatformVersion)' == '8.0'))";
	}
}

nuget := {
    // built-in defines 
    #defines { 
    
        framework      = native,
    
        content_root   = \content\${framework},
        tools_root     = \tools\${framework},
        lib_root       = \lib\${framework},
        build_root     = \build\${framework},
        src_root       = \src\${framework},

        d_include   = ${build_root}\include\${conditionFolder},
        d_docs      = ${build_root}\docs\${conditionFolder},
        d_bin       = ${build_root}\bin\${conditionFolder},  
        d_lib       = ${build_root}\lib\${conditionFolder},
        d_tools     = ${tools_root}\${conditionFolder},
		d_src       = ${src_root}\${conditionFolder},

        // since the generated msbuild props/targets files are always in a directory two 
        // deep from the package root.
        pkg_root    = $(MSBuildThisFileDirectory)..\..\,
    };
    
    // one of the pivots for the targets/props []  parameter.
    #output-packages {
        default : ${pkgname};
        redist : ${pkgname}.redist;
		symbols : ${pkgname}.symbols;
    }

    files {
        #output {
            package = default;
            // framework = ${framework};
            // project = targets;
        };

        bin += {  
            #output {
                package = redist;
            };
            #add-each-file : ::nuget.[redist]targets.[${condition}].CopyToOutput;
            #destination : ${d_bin};  
        };

        appx_bin += {  
            #output {
                package = redist;
            };
            #add-each-file : ::nuget.[redist]targets.[${condition}].EmbedInOutput;
            #destination : ${d_bin};  
        };

		symbols += {  
            #output {
                package = symbols;
            };
            #destination : ${d_bin};  
        };

		source += {  
            #output {
                package = symbols;
            };
            #destination : ${d_src};  
        };

        tools += {  
            #output {
                package = redist;
            };
            
            #add-folder : ::nuget.targets.[${condition}].BuildTimePath;
            #destination : ${d_tools};  
        };

        lib += { 
            // add each file as a link rule
            #add-each-file : ::nuget.targets.[${condition}].Libraries;
            #flatten = true;
            #destination = ${d_lib}; 
        };

        include += { 
            #add-folder : ::nuget.targets.[${condition}].Includes;
            #destination : ${d_include}; 
        };

        docs += { 
            #destination : ${d_docs};   
        };
    };
    
    
    targets {
        @alias Includes = ItemDefinitionGroup.ClCompile.AdditionalIncludeDirectories;
        @alias Defines = ItemDefinitionGroup.ClCompile.PreprocessorDefinitions;
        @alias Libraries = ItemDefinitionGroup.Link.AdditionalDependencies;
        // BuildTimePath : "";
        // CopyToOutput : "";

		/*
		// if AppContainerApplication is true, it's a WinRT app 
		['$(AppContainerApplication)' == 'true']
		TargetApplicationType = WinRT;

		['$(TargetPlatformIdentifier)' == 'Windows Phone' And '$(TargetPlatformVersion)' == '8.0' ]
		TargetApplicationType = Phone8;

		// if AppContainerApplication is undefined, it's a Desktop app 
		['$(AppContainerApplication)' == '' And 'TargetApplicationType' == '']
		TargetApplicationType = Desktop;
		*/
    }
    
    props {
        @alias Includes = ItemDefinitionGroup.ClCompile.AdditionalIncludeDirectories;
        @alias Libraries = ItemDefinitionGroup.Link.AdditionalDependencies;
        @alias Defines = ItemDefinitionGroup.ClCompile.PreprocessorDefinitions;
        // BuildTimePath : "";
        // CopyToOutput : "";
		
		/*
		// if AppContainerApplication is true, it's a WinRT app 
		['$(AppContainerApplication)' == 'true']
		TargetApplicationType = WinRT;

		['$(TargetPlatformIdentifier)' == 'Windows Phone' And '$(TargetPlatformVersion)' == '8.0' ]
		TargetApplicationType = Phone8;

		// if AppContainerApplication is undefined, it's a Desktop app 
		['$(AppContainerApplication)' == '' And 'TargetApplicationType' == '']
		TargetApplicationType = Desktop;
		*/
	}
}
