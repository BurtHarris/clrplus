
#if didnt_use
    public class ViewNode : AbstractDictionary<Selector, INode>, INode {
        public IModel Root { get; private set; }
        public INode Parent { get; private set; }
        public Selector Selector { get; private set; }

        public override bool Remove(Selector key) {
            // modifing nodes not permitted here.
            throw new NotImplementedException();
        }

        public override bool IsReadOnly {
            get {
                return true;
            }
        }

        public override INode this[Selector key] {
            get {
                // look up the item from the root.
                // TODO: implement

                return null;
            }
            set {
                // setting nodes not permitted here.
                throw new NotImplementedException();
            }
        }


        private ICollection<Selector> _keysCache;
        public override ICollection<Selector> Keys {
            get {
                // generate the list of selectors available here. 
                // TODO: implement
                if(_keysCache == null) {
                    var importedSheets = ((IDictionary<string, IModel>)Root.Imports).Values;

                }
                return _keysCache;
            }
        }

        public ViewNode(IModel root) {
            Root = root;
            Selector = null;
            Parent = null;
        }

        protected ViewNode(IModel root, Selector selector, INode parent) {
            Root = root;
            Selector = selector;
            Parent = parent;
        }

        private bool IsRootViewNode {
            get {
                return Selector == null;
            }
        }

        #region Metadata
        private IDictionary<string, RValue> _metadata;
        public IDictionary<string, RValue> Metadata { get { return _metadata ?? (_metadata = new ReadOnlyDelegateDictionary<string, RValue>(MetadataKeys, MetadataGet)); } }

        private RValue MetadataGet(string s) {
            // TODO: implement
            throw new NotImplementedException();
        }

        private ICollection<string> MetadataKeys() {
            // TODO: implement
            throw new NotImplementedException();
        }
        #endregion

        private IDictionary<Selector, IProperty> _properties;
        public IDictionary<Selector, IProperty> Properties { get { return _properties ?? (_properties = new ReadOnlyDelegateDictionary<Selector, IProperty>(PropertyKeys, PropertyGet)); } }

        private IProperty PropertyGet(Selector s) {
            // TODO: implement
            throw new NotImplementedException();
        }

        private ICollection<Selector> PropertyKeys() {
            // TODO: implement
            throw new NotImplementedException();
        }



        public void AddAlias(string aliasName, Selector aliasReference) {
            // TODO: implement
            throw new NotImplementedException();
        }

        public Alias GetAlias(string aliasName) {
            // TODO: implement
            throw new NotImplementedException();
        }
    }


     protected T GetTypeSpecificObject(IRValue value) {
            return GetTypeSpecificObject(value.Value);
        }

        protected T GetTypeSpecificObject(object value) {
            return (T)(object)value;
        }


        private T GetCoercedValue() {
            switch (_persistableInfo.PersistableCategory) {
                case PersistableCategory.String:
                    return (T)(object)Property.RValue.Value;

                case PersistableCategory.Parseable:
                    return (T)typeof (T).ParseString(Property.RValue.Value);

                case PersistableCategory.Nullable:
                    var v = Property.RValue.Value;
                    return !string.IsNullOrEmpty(v) ? (T)typeof (T).ParseString(Property.RValue.Value) : default(T);

                case PersistableCategory.Enumerable:
                    return ((T)GetValueAsIEnumerable(_persistableInfo.ElementType, _persistableInfo.Type));

                case PersistableCategory.Array:
                    throw new ClrPlusException("Array.?");
                    // return GetValueAsArray(key, pi.ElementType, pi.Type);


                    /* // not supported yet.
            case PersistableCategory.Dictionary:
                GetValueAsDictionary(key, pi.DictionaryKeyType, pi.DictionaryValueType, pi.Type);
                */

                case PersistableCategory.Enumeration:
                    return (T)Enum.Parse(_persistableInfo.Type, Property.RValue.Value);

                    /* // not supported yet.
        case PersistableCategory.Other:
            GetValueAsOther(key, pi.Type, o);
             */
            }
            throw new ClrPlusException("Unable to assign object to model. {0}".format(_persistableInfo.PersistableCategory));
        }


        private object GetValueAsIEnumerable(Type elementType, Type collectionType) {
            var result = (IList)Activator.CreateInstance(collectionType, true);

            foreach (var i in Property.RValue.Values) {
                switch (_persistableInfo.PersistableCategory) {
                    case PersistableCategory.String:
                        result.Add((T)(object)i);
                        break;

                    case PersistableCategory.Parseable:
                        result.Add((T)typeof (T).ParseString(i));
                        break;

                    case PersistableCategory.Nullable:
                        result.Add(!string.IsNullOrEmpty(i) ? (T)typeof (T).ParseString(i) : default(T));
                        break;

                    default:
                        throw new ClrPlusException("Uh, I dunno.");
                }
            }
            return result;
        }
#endif


#if DEPRECATED
    public interface IProperty : IItem {
        void SetCollection(RValue rvalue);
        void AddToCollection(RValue rvalue);
        void SetValue(RValue rvalue);

        RVSingle Value {get;}
        RVCollection Values { get; } 
    }


    public interface INode : IDictionary<Selector, IItem>, IItem {
        IModel Root { get; }
        INode Parent { get; }
        Selector Selector {get;}
        
        void AddAlias(string aliasName, Selector aliasReference);
        Alias GetAlias(string aliasName);
    }

    public interface IModel : INode {
        IOrderedDictionary<string, IModel> Imports {get;}
        dynamic MapTo(object backingObject, object routes);
    }
#endif